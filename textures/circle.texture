/*
circle.texture
 *    
 *    Copyright (c) 2003, Janne Kujala and Tuomas J. Lukka
 *    
 *    This file is part of Gzz.
 *    
 *    Gzz is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Gzz is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Gzz; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *    
 */
/*
 * Written by Janne Kujala and Tuomas J. Lukka
 */

// -*-C++-*-
#include <math.h>

#define FPARAM(name, default) float name = params->getFloat(#name, default);


void GENERATE(TextureParam *params, int width, int height, int depth, int components, float *data) {
    FPARAM(bias, 0);
    FPARAM(scale, 1);
    FPARAM(radius, 0.75);
    
    FPARAM(line_width, 2);

    if(width != height) return;
    
    int ind=0, i, j;
    float x, y;
    float xstep = 1.0 / width;
    float ystep = 1.0 / height;

    ind = 0;

    float c = width / 2.0 - 0.5;
    float r0 = 0.5 * radius * width;
    float r1 = 0.5 * radius * width + line_width;
    if (r1 > width / 2.0) {
	r0 -= r1 - width / 2.0;
	r1 = width / 2.0;
    }
    
    for (j = 0, y = 0; j < height; j++, y += ystep) {	
	for (i = 0, x = 0; i < width; i++, x += xstep) {
	    float r = sqrt((i-c) * (i-c) + (j-c) * (j-c));
	    float c = 0, a = 0;

	    if (r < r0) c = 1, a = 1; 
	    else if (r < r1) c = 0, a = 1;
	    
	    if (components >= 1) data[ind++] = c * scale + bias;
	    if (components >= 2) data[ind++] = c * scale + bias;
	    if (components >= 3) data[ind++] = c * scale + bias;
	    if (components >= 4) data[ind++] = a * scale + bias;
	}	
    }
    

}
