/*
lines1.texture
 *    
 *    Copyright (c) 2003, Janne Kujala and Tuomas J. Lukka
 *    
 *    This file is part of Gzz.
 *    
 *    Gzz is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Gzz is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Gzz; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *    
 */
/*
 * Written by Janne Kujala and Tuomas J. Lukka
 */

// -*-C++-*-
#include <math.h>

#define FPARAM(name, default) float name = params->getFloat(#name, default);
#define s_curve(t) ( t * t * (3. - 2. * t) )

static float dist(float w, float d) {
    while(d > 0.5) d -= 1;
    while(d < -0.5) d += 1;
    if(fabs(d) > w) return 0;
    return 1-s_curve(fabs(d)/w);
}

void GENERATE(TextureParam *params, int width, int height, int depth, int components, float *data) {

    FPARAM(linewidth, 0.02)

    if(components != 3) return;

    int ind=0, i, j;
    for (j = 0; j < height; j++) {
      for (i = 0; i < width; i++) {

	// 0..1
	float y = ((float)i)/(height-1);
	float x = ((float)j)/(height-1);

	float in = s_curve(x);

	float y1 = 0 - in;
	float y2 = 1/3.0 + in;
	float y3 = 2/3.0 - 2 * in;

	float d1 = dist(linewidth, y - y1);
	float d2 = dist(linewidth, y - y2);
	float d3 = dist(linewidth, y - y3);

	data[ind++] = d1;
	data[ind++] = d2;
	data[ind++] = d3;
      }
    }
}

// vim: set syntax=c:
