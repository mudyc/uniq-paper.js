/*
palette1.texture
 *    
 *    Copyright (c) 2003, Janne Kujala
 *    
 *    This file is part of Gzz.
 *    
 *    Gzz is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Gzz is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Gzz; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *    
 */
/*
 * Written by Janne Kujala
 */

// -*-C++-*-
#include <math.h>
#include <stdlib.h>

float frand() { return rand() / (RAND_MAX + 1.0); }

void getrandcolor(float col[]) {
  float r, g, b;
  do { r = frand(), g = frand(), b = frand(); }
  while (r + g + b < 1.5);
  col[0] = r;
  col[1] = g;
  col[2] = b;
}

#define ORD 4

void evalb(float dst[], float x, float y, float b[][ORD][3]) {
  float X0 = (1-x)*(1-x)*(1-x);
  float X1 = 3*(1-x)*(1-x)*x;
  float X2 = 3*(1-x)*x*x;
  float X3 = x*x*x;
  float Y0 = (1-y)*(1-y)*(1-y);
  float Y1 = 3*(1-y)*(1-y)*y;
  float Y2 = 3*(1-y)*y*y;
  float Y3 = y*y*y;


  for (int c = 0; c < 3; c++) {
    dst[c] 
      = b[0][0][c] * X0 * Y0
      + b[0][1][c] * X0 * Y1
      + b[0][2][c] * X0 * Y2
      + b[0][3][c] * X0 * Y3
      + b[1][0][c] * X1 * Y0
      + b[1][1][c] * X1 * Y1
      + b[1][2][c] * X1 * Y2
      + b[1][3][c] * X1 * Y3
      + b[2][0][c] * X2 * Y0
      + b[2][1][c] * X2 * Y1
      + b[2][2][c] * X2 * Y2
      + b[2][3][c] * X2 * Y3
      + b[3][0][c] * X3 * Y0
      + b[3][1][c] * X3 * Y1
      + b[3][2][c] * X3 * Y2
      + b[3][3][c] * X3 * Y3;
  }
}

void GENERATE(TextureParam *params, int width, int height, int depth, int components, float *data) {
    if(components != 3) return;

    long seed = (long)params->getFloat("seed", 0);
    srand(seed);

    float col[ORD][ORD][3];
    for (int a = 0; a < ORD; a++)
      for (int b = 0; b < ORD; b++)
	getrandcolor(col[a][b]);

    float x, y;
    float xstep = 1. / width;
    float ystep = 1. / height;
    int i, j;
    for (y = 0, j = 0; j < height; j++, y += ystep) {
      for (x = 0, i = 0; i < width; i++, x += xstep) {

	evalb(data, x, y, col);
	data += 3;
      }
    }
}

// vim: set syntax=c:
