/*
TubeFrame.texture
 *    
 *    Copyright (c) 2003, Janne Kujala and Tuomas J. Lukka
 *    
 *    This file is part of Gzz.
 *    
 *    Gzz is free software; you can redistribute it and/or modify it under
 *    the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *    
 *    Gzz is distributed in the hope that it will be useful, but WITHOUT
 *    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 *    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
 *    Public License for more details.
 *    
 *    You should have received a copy of the GNU General
 *    Public License along with Gzz; if not, write to the Free
 *    Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 *    MA  02111-1307  USA
 *    
 *    
 */
/*
 * Written by Janne Kujala and Tuomas J. Lukka
 */

// -*-C++-*-
#define FPARAM(name, default) float name = params->getFloat(#name, default);

#include <math.h>
#include <string.h>

void GENERATE(TextureParam *params, int width, int height, int depth, int components, float *data) {
  float irad = params->getFloat("irad", 0.9f);
  float orad = params->getFloat("orad", 0.995f);
  float tubeheight = params->getFloat("height", orad - irad);
  FPARAM(npredger, 0.05);
  // int power = (int)params->getFloat("power", 8);
  float shadow = params->getFloat("shadowlen", 0.5);


  FPARAM(spec_low, 0.85);
  FPARAM(spec_high, 0.9);

  FPARAM(lx, -.7);
  FPARAM(ly, .7);

  FPARAM(noisescale, .1);
  FPARAM(noisefreqangle, .1);
  FPARAM(noisefreqr, .1);

  FPARAM(xnoisescale, .1);
  FPARAM(xnoisefreq, 200);

  int type = 0;
  float L[3] = { lx, ly, sqrt(1 - lx*lx - ly*ly) };
  float E[3] = { 0, 0, 1 };

  const char *light = params->getString("light", "ambient");
  if (strcmp(light, "diffuse") == 0) {
    type = 1;
  }
  else if (strcmp(light, "specular") == 0) {
    type = 2;
    L[0] += E[0]; // Eye vector
    L[1] += E[1];
    L[2] += E[2];
    float m = 1 / sqrt(L[0] * L[0] + L[1] * L[1] + L[2] * L[2]);
    L[0] *= m;
    L[1] *= m;
    L[2] *= m;
  }

  float xstep = 2.0 / width;
  float ystep = 2.0 / height;
  float x, y;
  int ind = 0, i, j;

  for (j = 0, y = -1; j < height; j++, y += ystep) {
    for (i = 0, x = -1; i < width; i++, x += xstep) {
      float x8 = ((x * x) * (x * x)) * ((x * x) * (x * x));
      float y8 = ((y * y) * (y * y)) * ((y * y) * (y * y));


      float rad = sqrt(sqrt(sqrt(x8 + y8)));
      float r = (rad - irad) / (orad - irad);

      float angle = atan2(x, y);

      float par[2] = { noisefreqangle * angle, noisefreqr * r };
      float pnoise = Perlin::noise2(par);

      par[0] = xnoisefreq * x; par[1] = xnoisefreq * y;
      float xnoise = Perlin::noise2(par);

      float dot = 0;
      float alpha = r >= 0 && r <= 1;

      float nprforce = 0;

      float a = (rad - irad) * sqrt(width * height) * .5;
      float b = (orad - rad) * sqrt(width * height) * .5;
      if (a > -.5 && a < .5) alpha = a + .5;
      if (b > -.5 && b < .5) alpha = b + .5;

      if(r >= 0 && r <= 1 &&
        (r <= 0 + npredger || r >= 1 - npredger)) {
	    nprforce = 1;
	}

      if (type) {
	if (r > 0 && r < 1) {
	  float rad_x = rad * x * x * x * x * x * x * x / (x8 + y8);
	  float rad_y = rad * y * y * y * y * y * y * y / (x8 + y8);
	  
	  float h = sqrt(r * (1 - r)) * tubeheight;
	  float dh = (.5 - r) / h / (orad - irad) * tubeheight * tubeheight;
	  
	  /*
	  float pos0[2] = {x*128,y*128};
	  float pos2[2] = {x*32,y*32};
	  */

	  float der0[2] = {0,0}, der2[2] = {0,0};

	  /*
	  Perlin::noise2(pos0, der0);
	  Perlin::noise2(pos2, der2);
	  */

	  float dx = rad_x * dh + .1*der0[0] + .05*der2[0];
	  float dy = rad_y * dh + .1*der0[1] + .05*der2[1];

	  float N[3] = { -dx, -dy, 1 };
	  
	  float m = 1 / sqrt(N[0] * N[0] + N[1] * N[1] + N[2] * N[2]);
	  N[0] *= m;
	  N[1] *= m;
	  N[2] *= m;
	  
	  dot = L[0] * N[0] + L[1] * N[1] + L[2] * N[2];
	  if (dot < 0) dot = 0;

	  if (type == 2) {
	    dot = Perlin::smooth_step(dot, spec_low, spec_high);
	    /* Too photorealistic
	    for (int p = power; p >>= 1; )
	      dot *= dot;
	    */
	  }
	  if(nprforce) dot = 0;
	} 
      } else {
	float x_ = x + L[0] * tubeheight / L[2] * shadow;
	float y_ = y + L[1] * tubeheight / L[2] * shadow;
	float x8 = ((x_ * x_) * (x_ * x_)) * ((x_ * x_) * (x_ * x_));
	float y8 = ((y_ * y_) * (y_ * y_)) * ((y_ * y_) * (y_ * y_));
	float rad = sqrt(sqrt(sqrt(x8 + y8)));
	float r2 = (rad - irad) / (orad - irad);
	
	dot = alpha;
	if(nprforce) dot = 0;
	if (alpha < 1 && r2 >= r && r2 <= 1)
	  {
	    float t = 1 - r2;
	    alpha = alpha + (1 - alpha) * .7 * (1 - t * t * t * t);
	  }
      } 

      dot *= (1 + noisescale * pnoise + xnoisescale * xnoise);
      
      switch (components) {
      case 1:
	data[ind] = dot;
	break;
      case 2:
	data[ind] = dot;
	data[ind + 1] = alpha;
	break;
      }

      ind += components;
    }
  }
}


// vim: set syntax=c :
